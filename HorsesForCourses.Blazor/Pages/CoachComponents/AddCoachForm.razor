@using HorsesForCourses.Blazor.Dtos
@using Microsoft.AspNetCore.Components.Forms

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Add New Coach</h5>

                <button type="button" class="btn-close" @onclick="OnClose"></button> @*X - button to close window*@
            </div>
            
            <div class="modal-body">
                @if (Coach != null)
                {
                    @*The main component of the form. The attribute of Model = "@Coach" connects the form with the object Coach, 
                    And Onvalidsubmit indicates a method that will be caused after successful validation.*@
                    <EditForm Model="@Coach" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @*Name field*@
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="Coach.Name" />
                        </div>

                        @*Email field*@
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="Coach.Email" />
                        </div>

                        @*save btn*@
                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                }
                else
                {
                    <p>Loading form...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public CreateCoachRequest? Coach { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }
}