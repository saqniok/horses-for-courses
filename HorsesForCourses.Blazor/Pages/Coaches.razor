@page "/coaches"
@using HorsesForCourses.Blazor.Pages.CoachComponents

<PageTitle>Coaches</PageTitle>

<h1>Coaches</h1>

<button class="btn btn-primary mb-3" @onclick="ShowAddCoachModal">Add Coach</button>

@if (error != null)
{
    <p class="text-danger">@error</p>
}
else if (coaches == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Courses Assigned</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var coach in coaches)
            {
                <CoachRow Coach="coach"
                          IsExpanded="expandedCoachIds.Contains(coach.Id)"
                          CoachDetails="@(coachDetailsCache.ContainsKey(coach.Id) ? coachDetailsCache[coach.Id] : null)"
                          OnToggleExpand="() => ToggleCoachDetails(coach.Id)"
                          OnEdit="() => ShowEditCoachModal(coach.Id)"
                          OnDelete="() => DeleteCoach(coach.Id)" />
            }
        </tbody>
    </table>
}

@if (showAddCoachModal)
{
    <AddCoachForm  Coach="@newCoach" 
                   OnValidSubmit="AddCoach" 
                   OnClose="HideAddCoachModal" />
}

@if (showEditCoachModal && editingCoach != null)
{
    <EditCoachForm Coach="@editingCoach"
                   OnValidSubmit="UpdateCoach"
                   OnClose="HideEditCoachModal"
                   NewSkill="@newSkill"
                   NewSkillChanged="@((value) => newSkill = value)"
                   OnAddSkillOnEnter="(e) => AddSkillOnEnter(e, editingCoach)"
                   OnAddSkill="(() => AddSkill(editingCoach))"
                   OnRemoveSkill="(tuple) => RemoveSkill(tuple.Item1, tuple.Item2)" />
}

@if (showConfirmDeleteModal)
{
    <ConfirmDialog OnConfirm="ConfirmDelete"
                   OnCancel="CancelDelete" />
}