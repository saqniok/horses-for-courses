@page "/coaches"
@using HorsesForCourses.Blazor.Pages.CoachComponents

<PageTitle>Coach Management - Horses for Courses</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0">Coach Management</h1>
        <button class="btn btn-primary" @onclick="ShowAddCoachModal">
            <i class="fas fa-plus me-2"></i>Add New Coach
        </button>
    </div>

    @if (error != null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle me-2"></i>@error
        </div>
    }
    else if (coaches == null)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading coaches...</p>
        </div>
    }
    else if (!coaches.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-users fa-4x text-muted mb-3"></i>
            <h4 class="text-muted">No Coaches Found</h4>
            <p class="text-muted">Get started by adding your first coach to the system.</p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Courses Assigned</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var coach in coaches)
                            {
                                <CoachRow Coach="coach"
                                          OnToggleDetails="() => ToggleCoachDetails(coach.Id)"
                                          OnEdit="() => ShowEditCoachModal(coach.Id)"
                                          OnDelete="() => ShowDeleteConfirmModal(coach.Id)" />

                                @if (expandedCoachIds.Contains(coach.Id))
                                {
                                    <tr>
                                        <td colspan="4" class="bg-light">
                                            <CoachDetails Details="coachDetailsCache.GetValueOrDefault(coach.Id)" />
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

@if (showAddCoachModal)
{
    <AddCoachForm OnValidSubmit="HandleCoachAdded" OnClose="HideAddCoachModal" />
}

@if (showEditCoachModal && editingCoach != null)
{
    <EditCoachForm EditingCoach="editingCoach"
                   OnCoachUpdated="HandleCoachUpdated"
                   OnCancel="HideEditCoachModal" />
}

@if (showConfirmDeleteModal)
{
    <ConfirmDialog Title="Delete Coach"
                   Message=@($"Are you sure you want to delete this coach?")
                   OnConfirm="HandleDeleteConfirmed"
                   OnCancel="HideDeleteConfirmModal" />
}
</div>
