@page "/coaches"
@inject ICoachService CoachService
@inject IJSRuntime JSRuntime

<PageTitle>Coaches</PageTitle>

<h1>Coaches</h1>

<button class="btn btn-primary mb-3" @onclick="ShowAddCoachModal">Add Coach</button>

@if (error != null)
{
    <p class="text-danger">@error</p>
}
else if (coaches == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Courses Assigned</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var coach in coaches)
            {
                <tr>
                    <td>@coach.Name</td>
                    <td>@coach.Email</td>
                    <td>@coach.NumberOfCoursesAssignedTo</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditCoachModal(coach.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCoach(coach.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showAddCoachModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Coach</h5>
                    <button type="button" class="btn-close" @onclick="HideAddCoachModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newCoach" OnValidSubmit="AddCoach">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="newCoach.Name" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="newCoach.Email" />
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (showEditCoachModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Coach</h5>
                    <button type="button" class="btn-close" @onclick="HideEditCoachModal"></button>
                </div>
                <div class="modal-body">
                    @if (editingCoach == null)
                    {
                        <p>Loading coach details...</p>
                    }
                    else
                    {
                        <EditForm Model="@editingCoach" OnValidSubmit="UpdateCoach">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="editName" class="form-label">Name</label>
                                <InputText id="editName" class="form-control" @bind-Value="editingCoach.Name" />
                            </div>
                            <div class="mb-3">
                                <label for="editEmail" class="form-label">Email</label>
                                <InputText id="editEmail" class="form-control" @bind-Value="editingCoach.Email" />
                            </div>

                            <h6>Skills</h6>
                            <div class="mb-3">
                                @foreach (var skill in editingCoach.Skills)
                                {
                                    <span class="badge bg-secondary me-1">@skill</span>
                                }
                                <InputText class="form-control mt-2" placeholder="Add skill" @bind-Value="newSkill" @onkeydown="(e) => AddSkillOnEnter(e, editingCoach)" />
                                <button type="button" class="btn btn-sm btn-success mt-2" @onclick="() => AddSkill(editingCoach)">Add Skill</button>
                            </div>

                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<CoachSummaryResponse>? coaches;
    private string? error;

    private bool showAddCoachModal = false;
    private CreateCoachRequest newCoach = new() { Name = string.Empty, Email = string.Empty };

    private bool showEditCoachModal = false;
    private CoachDetailsDto? editingCoach;
    private string newSkill = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoaches();
    }

    private async Task LoadCoaches()
    {
        try
        {
            coaches = await CoachService.GetCoachesAsync();
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void ShowAddCoachModal()
    {
        newCoach = new() { Name = string.Empty, Email = string.Empty };
        showAddCoachModal = true;
    }

    private void HideAddCoachModal()
    {
        showAddCoachModal = false;
    }

    private async Task AddCoach()
    {
        try
        {
            await CoachService.AddCoachAsync(newCoach);
            HideAddCoachModal();
            await LoadCoaches();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private async Task ShowEditCoachModal(int id)
    {
        try
        {
            editingCoach = await CoachService.GetCoachDetailsAsync(id);
            showEditCoachModal = true;
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void HideEditCoachModal()
    {
        showEditCoachModal = false;
        editingCoach = null;
    }

    private async Task UpdateCoach()
    {
        if (editingCoach == null) return;

        try
        {
            await CoachService.UpdateCoachAsync(editingCoach.Id, editingCoach);
            await CoachService.UpdateCoachSkillsAsync(editingCoach.Id, new UpdateCoachSkillsDto { Skills = editingCoach.Skills });
            HideEditCoachModal();
            await LoadCoaches();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void AddSkill(CoachDetailsDto coach)
    {
        if (!string.IsNullOrWhiteSpace(newSkill) && !coach.Skills.Contains(newSkill))
        {
            coach.Skills.Add(newSkill);
            newSkill = string.Empty;
        }
    }

    private void AddSkillOnEnter(KeyboardEventArgs e, CoachDetailsDto coach)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddSkill(coach);
        }
    }

    private async Task DeleteCoach(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this coach?");
        if (confirmed)
        {
            try
            {
                await CoachService.DeleteCoachAsync(id);
                await LoadCoaches();
            }
            catch (Exception ex)
            {
                error = ex.Message;
            }
        }
    }
}